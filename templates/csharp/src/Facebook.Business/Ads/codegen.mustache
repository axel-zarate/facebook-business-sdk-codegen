/**
 * Copyright (c) 2015-present, Facebook, Inc. All rights reserved.
 *
 * You are hereby granted a non-exclusive, worldwide, royalty-free license to
 * use, copy, modify, and distribute this software in source code or binary
 * form for use in connection with the web services and APIs provided by
 * Facebook.
 *
 * As with any software that integrates with the Facebook platform, your use
 * of this software is subject to the Facebook Developer Principles and
 * Policies [http://developers.facebook.com/policy/]. This copyright notice
 * shall be included in all copies or substantial portions of the software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;

/**
 * This class is auto-generated.
 *
 * For any issues or feature requests related to this class, please let us know
 * on github and we'll fix in our codegen framework. We'll not be able to accept
 * pull request for this class.
 *
 */
namespace Facebook.Business.Ads
{
    public partial class {{name:pascal_case}} : ApiNode
    {
        {{#fields}}
        {{^is_creation_field}}
        {{#cls_is_Campaign}}
        {{#is_id_field}}
        [JsonProperty("id")]
        {{/is_id_field}}
        {{^is_id_field}}
        [JsonProperty("{{api_name}}")]
        {{/is_id_field}}
        {{/cls_is_Campaign}}
        {{^cls_is_Campaign}}
        [JsonProperty("{{api_name}}")]
        {{/cls_is_Campaign}}
        public {{{type:csharp}}}{{^type:csharp}}JToken{{/type:csharp}}? {{name:csharp}} { get; set; }

        {{/is_creation_field}}
        {{/fields}}
        {{#cls_is_AdCreative}}
        [JsonProperty("creative_id")]
        public string? CreativeId { get; set; }

        {{/cls_is_AdCreative}}
        {{^has_get}}public {{/has_get}}{{#has_get}}{{#can_be_data_type}}public {{/can_be_data_type}}{{^can_be_data_type}}internal {{/can_be_data_type}}{{/has_get}}{{name:pascal_case}}()
        {
        }
        {{#has_get}}

        {{#cls_is_AdAccount}}
        private string PrefixedId => "act_" + Id;
        {{/cls_is_AdAccount}}

        public {{name:pascal_case}}(long id) : this(id.ToString())
        {
        }

        public {{name:pascal_case}}(string id)
        {
            {{^cls_is_AdAccount}}
            {{^cls_is_AsyncRequest}}
            Id = id;
            {{/cls_is_AsyncRequest}}
            {{/cls_is_AdAccount}}
            {{#cls_is_AdAccount}}
            Id = id.Replace("act_", string.Empty);
            {{/cls_is_AdAccount}}
            {{#cls_is_AdCreative}}
            CreativeId = Id;
            {{/cls_is_AdCreative}}
            {{#cls_is_AsyncRequest}}
            Id = long.Parse(id);
            {{/cls_is_AsyncRequest}}
        }
        {{/has_get}}
        {{#apis}}

        public {{name:pascal_case}}ApiRequest {{name:pascal_case}}(ApiContext context)
        {
            return new {{name:pascal_case}}ApiRequest(context, {{#cls_is_AdAccount}}Prefixed{{/cls_is_AdAccount}}Id);
        }
        {{/apis}}
        {{#api_spec_based_enum_reference}}

        [JsonConverter(typeof(StringEnumConverter))]
        public enum Enum{{field_or_param:pascal_case}}
        {
            {{#values_with_naming_convention}}
            [EnumMember(Value = "{{{value}}}")]
            {{#is_irregular_name}}Value{{/is_irregular_name}}{{{value:pascal_case}}},
            {{/values_with_naming_convention}}
        }
        {{/api_spec_based_enum_reference}}
        {{#apis}}

        public class {{name:pascal_case}}ApiRequest : ApiRequest<{{^return_single_node}}ApiNodeList<{{/return_single_node}}{{{return}}}{{^return}}ApiNode{{/return}}{{^return_single_node}}>{{/return_single_node}}>
        {
            {{#params}}
            public const string Param{{name:pascal_case}} = "{{api_name}}";
            {{/params}}
            {{#allow_file_upload}}
            public const string ParamFile = "file";
            {{/allow_file_upload}}

            protected override string[] ParamNames { get; } =
            {
                {{#params}}
                Param{{name:pascal_case}},
                {{/params}}
                {{#allow_file_upload}}
                ParamFile,
                {{/allow_file_upload}}
            };

            {{#param_fields}}
            {{^not_visible}}
            public const string Field{{name:pascal_case}} = "{{api_name}}";
            {{/not_visible}}
            {{/param_fields}}
            protected override string[] FieldNames { get; } =
            {
                {{#param_fields}}
                {{^not_visible}}
                Field{{name:pascal_case}},
                {{/not_visible}}
                {{/param_fields}}
            };

            protected override string Method { get; } = "{{{method}}}";

            protected override string Endpoint { get; } = "{{{endpoint}}}";

            public {{name:pascal_case}}ApiRequest(ApiContext context) : base(context) { }

            public {{name:pascal_case}}ApiRequest(ApiContext context, string? nodeId) : base(context, nodeId) { }
            {{#allow_file_upload}}

            public {{name:pascal_case}}ApiRequest AddUploadFile(string uploadName, System.IO.Stream file)
            {
                SetParam(uploadName, file);
                return this;
            }

            public {{name:pascal_case}}ApiRequest SetUseVideoEndpoint(bool useVideoEndpoint)
            {
                UseVideoEndpoint = useVideoEndpoint;
                return this;
            }
            {{/allow_file_upload}}
            {{#params}}

            public {{api:name:pascal_case}}ApiRequest Set{{#param_name_params}}Param{{/param_name_params}}{{name:pascal_case}}({{{type:csharp}}}{{^type:csharp}}JToken{{/type:csharp}} {{#is_keyword}}@{{/is_keyword}}{{name:camel_case}})
            {
                SetParam(Param{{name:pascal_case}}, {{#is_keyword}}@{{/is_keyword}}{{name:camel_case}});
                return this;
            }
            {{#is_file_param}}

            public {{api:name:pascal_case}}ApiRequest Set{{name:pascal_case}} (System.IO.Stream {{#is_keyword}}@{{/is_keyword}}{{name:camel_case}})
            {
                SetParam(Param{{name:pascal_case}}, {{#is_keyword}}@{{/is_keyword}}{{name:camel_case}});
                return this;
            }

            public {{api:name:pascal_case}}ApiRequest Set{{name:pascal_case}} (byte[] {{#is_keyword}}@{{/is_keyword}}{{name:camel_case}})
            {
                SetParam(Param{{name:pascal_case}}, {{#is_keyword}}@{{/is_keyword}}{{name:camel_case}});
                return this;
            }
            {{/is_file_param}}
            {{^is_string}}

            public {{api:name:pascal_case}}ApiRequest Set{{name:pascal_case}}(string {{#is_keyword}}@{{/is_keyword}}{{name:camel_case}})
            {
                SetParam(Param{{name:pascal_case}}, {{#is_keyword}}@{{/is_keyword}}{{name:camel_case}});
                return this;
            }
            {{/is_string}}
            {{/params}}
            {{#param_fields}}
            {{^not_visible}}

            public {{api:name:pascal_case}}ApiRequest Request{{name:pascal_case}}Field()
            {
                RequestField(Field{{name:pascal_case}});
                return this;
            }
            {{/not_visible}}
            {{/param_fields}}
        }
        {{/apis}}
    }
}
